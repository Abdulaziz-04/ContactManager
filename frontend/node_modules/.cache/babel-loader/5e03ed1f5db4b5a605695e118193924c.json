{"ast":null,"code":"import _toConsumableArray from\"/home/abdul/Documents/Reactprog/ContactManager/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/abdul/Documents/Reactprog/ContactManager/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CREATE_CONTACT,DELETE_CONTACT,UPDATE_CONTACT,SET_FILTER,CLEAR_CURRENT,SET_CURRENT,CLEAR_FILTER,CONTACT_ERROR,GET_CONTACTS,CLEAR_CONTACTS}from'../types';//State is immutable always so we always create a copy using the spread operator and then implement the required changes\nvar cmReducer=function cmReducer(state,action){switch(action.type){default:return state;case GET_CONTACTS:return _objectSpread({},state,{contacts:action.payload});case CREATE_CONTACT:return _objectSpread({},state,{contacts:[].concat(_toConsumableArray(state.contacts),[action.payload]),loading:false});case DELETE_CONTACT:return _objectSpread({},state,{contacts:state.contacts.filter(function(contact){return contact._id!==action.payload;}),loading:false});case UPDATE_CONTACT:return _objectSpread({},state,{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;}),loading:false});case CONTACT_ERROR:return _objectSpread({},state,{prb:action.payload});case SET_CURRENT:return _objectSpread({},state,{current:action.payload});case CLEAR_CURRENT:return _objectSpread({},state,{current:null});case CLEAR_FILTER:return _objectSpread({},state,{filter:null});case CLEAR_CONTACTS:return _objectSpread({},state,{contacts:[],current:null,filter:null,prb:null});case SET_FILTER:return _objectSpread({},state,{filter:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),'gi');return contact.name.match(regex)||contact.email.match(regex);})});}};export default cmReducer;","map":{"version":3,"sources":["/home/abdul/Documents/Reactprog/ContactManager/frontend/src/ContextAPI/CM/cmReducer.js"],"names":["CREATE_CONTACT","DELETE_CONTACT","UPDATE_CONTACT","SET_FILTER","CLEAR_CURRENT","SET_CURRENT","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","cmReducer","state","action","type","contacts","payload","loading","filter","contact","_id","map","prb","current","regex","RegExp","name","match","email"],"mappings":"2RAAA,OACIA,cADJ,CAEIC,cAFJ,CAGIC,cAHJ,CAIIC,UAJJ,CAKIC,aALJ,CAMIC,WANJ,CAOIC,YAPJ,CAQIC,aARJ,CASIC,YATJ,CAUIC,cAVJ,KAWO,UAXP,CAYA;AAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACjC,OAAQA,MAAM,CAACC,IAAf,EACI,QACI,MAAOF,CAAAA,KAAP,CACJ,IAAKH,CAAAA,YAAL,CACI,wBACOG,KADP,EAEIG,QAAQ,CAAEF,MAAM,CAACG,OAFrB,GAIJ,IAAKf,CAAAA,cAAL,CACI,wBACOW,KADP,EAEIG,QAAQ,8BAAMH,KAAK,CAACG,QAAZ,GAAsBF,MAAM,CAACG,OAA7B,EAFZ,CAGIC,OAAO,CAAE,KAHb,GAKJ,IAAKf,CAAAA,cAAL,CACI,wBACOU,KADP,EAEIG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACN,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAA3B,EADD,CAFd,CAKIC,OAAO,CAAE,KALb,GAOJ,IAAKd,CAAAA,cAAL,CACI,wBACOS,KADP,EAEIG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmB,SAAAF,OAAO,QAChCA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,CACMP,MAAM,CAACG,OADb,CAEMG,OAH0B,EAA1B,CAFd,CAOIF,OAAO,CAAE,KAPb,GASJ,IAAKT,CAAAA,aAAL,CACI,wBACOI,KADP,EAEIU,GAAG,CAAET,MAAM,CAACG,OAFhB,GAIJ,IAAKV,CAAAA,WAAL,CACI,wBACOM,KADP,EAEIW,OAAO,CAAEV,MAAM,CAACG,OAFpB,GAIJ,IAAKX,CAAAA,aAAL,CACI,wBACOO,KADP,EAEIW,OAAO,CAAE,IAFb,GAIJ,IAAKhB,CAAAA,YAAL,CACI,wBACOK,KADP,EAEIM,MAAM,CAAE,IAFZ,GAIJ,IAAKR,CAAAA,cAAL,CACI,wBACOE,KADP,EAEIG,QAAQ,CAAE,EAFd,CAGIQ,OAAO,CAAE,IAHb,CAIIL,MAAM,CAAE,IAJZ,CAKII,GAAG,CAAE,IALT,GAOJ,IAAKlB,CAAAA,UAAL,CACI,wBACOQ,KADP,EAEIM,MAAM,CAAEN,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsB,SAAAC,OAAO,CAAI,CACrC,GAAMK,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcZ,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,MACIG,CAAAA,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CADjC,CAGH,CALO,CAFZ,GA7DR,CAuEH,CAxED,CA0EA,cAAeb,CAAAA,SAAf","sourcesContent":["import {\n    CREATE_CONTACT,\n    DELETE_CONTACT,\n    UPDATE_CONTACT,\n    SET_FILTER,\n    CLEAR_CURRENT,\n    SET_CURRENT,\n    CLEAR_FILTER,\n    CONTACT_ERROR,\n    GET_CONTACTS,\n    CLEAR_CONTACTS\n} from '../types';\n//State is immutable always so we always create a copy using the spread operator and then implement the required changes\n\nconst cmReducer = (state, action) => {\n    switch (action.type) {\n        default:\n            return state;\n        case GET_CONTACTS:\n            return {\n                ...state,\n                contacts: action.payload\n            };\n        case CREATE_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload],\n                loading: false\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(\n                    contact => contact._id !== action.payload\n                ),\n                loading: false\n            };\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact =>\n                    contact._id === action.payload._id\n                        ? action.payload\n                        : contact\n                ),\n                loading: false\n            };\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                prb: action.payload\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filter: null\n            };\n        case CLEAR_CONTACTS:\n            return {\n                ...state,\n                contacts: [],\n                current: null,\n                filter: null,\n                prb: null\n            };\n        case SET_FILTER:\n            return {\n                ...state,\n                filter: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return (\n                        contact.name.match(regex) || contact.email.match(regex)\n                    );\n                })\n            };\n    }\n};\n\nexport default cmReducer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { CREATE_CONTACT, DELETE_CONTACT, UPDATE_CONTACT, SET_FILTER, CLEAR_CURRENT, SET_CURRENT, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS, CLEAR_CONTACTS } from '../types'; //State is immutable always so we always create a copy using the spread operator and then implement the required changes\n\nconst cmReducer = (state, action) => {\n  switch (action.type) {\n    default:\n      return state;\n\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload\n      };\n\n    case CREATE_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        prb: action.payload\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filter: null\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: [],\n        current: null,\n        filter: null,\n        prb: null\n      };\n\n    case SET_FILTER:\n      return { ...state,\n        filter: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n  }\n};\n\nexport default cmReducer;","map":{"version":3,"sources":["/home/abdul/Documents/Reactprog/ContactManager/frontend/src/ContextAPI/CM/cmReducer.js"],"names":["CREATE_CONTACT","DELETE_CONTACT","UPDATE_CONTACT","SET_FILTER","CLEAR_CURRENT","SET_CURRENT","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","cmReducer","state","action","type","contacts","payload","loading","filter","contact","_id","map","prb","current","regex","RegExp","name","match","email"],"mappings":"AAAA,SACIA,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,UAJJ,EAKIC,aALJ,EAMIC,WANJ,EAOIC,YAPJ,EAQIC,aARJ,EASIC,YATJ,EAUIC,cAVJ,QAWO,UAXP,C,CAYA;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI;AACI,aAAOF,KAAP;;AACJ,SAAKH,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFd,OAAP;;AAIJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFP;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACNC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAD5B,CAFP;AAKHC,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKd,cAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmBF,OAAO,IAChCA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,GACMP,MAAM,CAACG,OADb,GAEMG,OAHA,CAFP;AAOHF,QAAAA,OAAO,EAAE;AAPN,OAAP;;AASJ,SAAKT,aAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHU,QAAAA,GAAG,EAAET,MAAM,CAACG;AAFT,OAAP;;AAIJ,SAAKV,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHW,QAAAA,OAAO,EAAEV,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKX,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHW,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKhB,YAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHM,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAIJ,SAAKR,cAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHG,QAAAA,QAAQ,EAAE,EAFP;AAGHQ,QAAAA,OAAO,EAAE,IAHN;AAIHL,QAAAA,MAAM,EAAE,IAJL;AAKHI,QAAAA,GAAG,EAAE;AALF,OAAP;;AAOJ,SAAKlB,UAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHM,QAAAA,MAAM,EAAEN,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAI;AACrC,gBAAMK,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEZ,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBACIG,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CADjC;AAGH,SALO;AAFL,OAAP;AA7DR;AAuEH,CAxED;;AA0EA,eAAeb,SAAf","sourcesContent":["import {\n    CREATE_CONTACT,\n    DELETE_CONTACT,\n    UPDATE_CONTACT,\n    SET_FILTER,\n    CLEAR_CURRENT,\n    SET_CURRENT,\n    CLEAR_FILTER,\n    CONTACT_ERROR,\n    GET_CONTACTS,\n    CLEAR_CONTACTS\n} from '../types';\n//State is immutable always so we always create a copy using the spread operator and then implement the required changes\n\nconst cmReducer = (state, action) => {\n    switch (action.type) {\n        default:\n            return state;\n        case GET_CONTACTS:\n            return {\n                ...state,\n                contacts: action.payload\n            };\n        case CREATE_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, action.payload],\n                loading: false\n            };\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(\n                    contact => contact._id !== action.payload\n                ),\n                loading: false\n            };\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(contact =>\n                    contact._id === action.payload._id\n                        ? action.payload\n                        : contact\n                ),\n                loading: false\n            };\n        case CONTACT_ERROR:\n            return {\n                ...state,\n                prb: action.payload\n            };\n        case SET_CURRENT:\n            return {\n                ...state,\n                current: action.payload\n            };\n        case CLEAR_CURRENT:\n            return {\n                ...state,\n                current: null\n            };\n        case CLEAR_FILTER:\n            return {\n                ...state,\n                filter: null\n            };\n        case CLEAR_CONTACTS:\n            return {\n                ...state,\n                contacts: [],\n                current: null,\n                filter: null,\n                prb: null\n            };\n        case SET_FILTER:\n            return {\n                ...state,\n                filter: state.contacts.filter(contact => {\n                    const regex = new RegExp(`${action.payload}`, 'gi');\n                    return (\n                        contact.name.match(regex) || contact.email.match(regex)\n                    );\n                })\n            };\n    }\n};\n\nexport default cmReducer;\n"]},"metadata":{},"sourceType":"module"}